import React, { useRef, useCallback, useEffect, useState } from 'react';
import {
  View,
  StyleSheet,
  BackHandler,
  ToastAndroid,
} from 'react-native';
import { WebView } from 'react-native-webview';
import {
  GoogleSignin,
  statusCodes,
  SignInResponse,
} from '@react-native-google-signin/google-signin'; // Import SignInResponse type
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import { SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';

const AppContent = () => {
  const insets = useSafeAreaInsets();
  const webViewRef = useRef<WebView>(null);
  // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäºÏùò Ï≤´ Î≤àÏß∏ ÌÅ¥Î¶≠ÏùÑ Ï∂îÏ†ÅÌïòÍ∏∞ ÏúÑÌïú Ref
  const backPressedOnce = useRef(false);
  const [canGoBack, setCanGoBack] = useState(false);

  // ÏïàÎìúÎ°úÏù¥ÎìúÏùò Î¨ºÎ¶¨Ï†Å Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÎèôÏûëÏùÑ Ï≤òÎ¶¨ÌïòÍ∏∞ ÏúÑÌïú useEffect
  useEffect(() => {
    // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäºÏùÑ ÎàåÎ†ÄÏùÑ Îïå Ïã§ÌñâÎê† ÏΩúÎ∞± Ìï®Ïàò
    const backAction = () => {
      // WebViewÏóêÏÑú Îí§Î°úÍ∞ÄÍ∏∞Í∞Ä Í∞ÄÎä•Ìïú Í≤ΩÏö∞
      if (canGoBack && webViewRef.current) {
        webViewRef.current.goBack();
        return true; // Í∏∞Î≥∏ ÎèôÏûë Ï∞®Îã®
      }
      // backPressedOnce RefÍ∞Ä trueÏù¥Î©¥ (2Ï¥à ÏïàÏóê Îã§Ïãú ÎàåÎ†∏Îã§Îäî ÏùòÎØ∏)
      if (backPressedOnce.current) {
        BackHandler.exitApp(); // Ïï±ÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§.
        return true;
      }

      // Ï≤´ Î≤àÏß∏ ÌÅ¥Î¶≠Ïù¥ÎØÄÎ°ú, Ref Í∞íÏùÑ trueÎ°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
      backPressedOnce.current = true;
      // ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïàÎÇ¥ Î©îÏãúÏßÄÎ•º ÏßßÍ≤å Î≥¥Ïó¨Ï§çÎãàÎã§.
      ToastAndroid.show(
        'Ìïú Î≤à Îçî Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥ Ï¢ÖÎ£åÎê©ÎãàÎã§.',
        ToastAndroid.SHORT,
      );

      // 2Ï¥à ÌõÑÏóê Ref Í∞íÏùÑ Îã§Ïãú falseÎ°ú Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.
      setTimeout(() => {
        backPressedOnce.current = false;
      }, 2000);

      return true; // trueÎ•º Î∞òÌôòÌïòÏó¨ Í∏∞Î≥∏ ÎèôÏûë(Ïï± Ï¶âÏãú Ï¢ÖÎ£å)ÏùÑ ÎßâÏäµÎãàÎã§.
    };

    // BackHandlerÏóê ÏúÑÏóêÏÑú Ï†ïÏùòÌïú ÏΩúÎ∞± Ìï®ÏàòÎ•º Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑàÎ°ú Îì±Î°ùÌï©ÎãàÎã§.
    const backHandler = BackHandler.addEventListener(
      'hardwareBackPress',
      backAction,
    );

    // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ïñ∏ÎßàÏö¥Ìä∏Îê† Îïå(ÌôîÎ©¥ÏóêÏÑú ÏÇ¨ÎùºÏßà Îïå) Îì±Î°ùÌñàÎçò Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑàÎ•º Ï†úÍ±∞Ìï©ÎãàÎã§.
    // (Î©îÎ™®Î¶¨ ÎàÑÏàò Î∞©ÏßÄÎ•º ÏúÑÌï¥ ÌïÑÏàòÏ†ÅÏù∏ Í≥ºÏ†ïÏûÖÎãàÎã§.)
    return () => backHandler.remove();
  }, [canGoBack]);

  // WebViewÏùò ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏÉÅÌÉú Î≥ÄÍ≤ΩÏùÑ Ï≤òÎ¶¨ÌïòÎäî Ìï®Ïàò Ï∂îÍ∞Ä
  const handleNavigationStateChange = useCallback((navState: any) => {
    setCanGoBack(navState.canGoBack);
    // ÌéòÏù¥ÏßÄÍ∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Îí§Î°úÍ∞ÄÍ∏∞ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    backPressedOnce.current = false;
  }, []);

  // Make sure this IP is correct and includes the query parameter
  // const WEB_URL = 'http://192.168.139.167:5173/?isReactNativeApp=true';
  // const WEB_URL = 'http://192.168.35.228:5173/?isReactNativeApp=true';
  // const WEB_URL = 'https://baff-fe.vercel.app/?isReactNativeApp=true';
  const WEB_URL = 'https://change-up.me/?isReactNativeApp=true';
  // const BACKEND_URL = 'http://10.0.2.2:8080'; // Assuming backend runs on 8080
  const BACKEND_URL = 'https://baff-be-ckop.onrender.com'; // Assuming backend runs on 8080

  // Google Web Client ID from AuthController.java
  const GOOGLE_WEB_CLIENT_ID =
    '1068438948743-r2a9hcnpuc8uphj75e0msmqv6qqhgrel.apps.googleusercontent.com';
  // const GOOGLE_WEB_CLIENT_ID = '1068438948743-8uh3m6ssd8nc290hi8kja624015drh4v.apps.googleusercontent.com';
  // const GOOGLE_WEB_CLIENT_ID = '1068438948743-a9hcnpuc8uphj75e0msmqv6qqhgrel.apps.googleusercontent.com';

  useEffect(() => {
    GoogleSignin.configure({
      webClientId: GOOGLE_WEB_CLIENT_ID,
      offlineAccess: true, // if you need to access Google API on behalf of the user from your backend
    });
  }, []);

  const _signIn = async () => {
    try {
      console.log('RN: Î°úÍ∑∏Ïù∏ ÏãúÎèÑ');
      await GoogleSignin.hasPlayServices();
      const userInfo: SignInResponse = await GoogleSignin.signIn();
      console.log('RN: Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ', userInfo);

      const idToken = userInfo.data?.idToken;
      if (!idToken) {
        throw new Error('Google Id TokenÏùÑ ÏñªÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      }

      console.log('RN: Î∞±ÏóîÎìúÏóê IdToken Ï†ÑÏÜ°Ï§ë...');

      try {
        const backendResponse = await axios.post(
          `${BACKEND_URL}/api/auth/google/mobile`,
          {
            idToken: idToken,
          },
          {
            timeout: 10000, // 10Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
          },
        );

        const { token: accessToken, user: backendUser } = backendResponse.data;
        console.log('RN: Î∞±ÏóîÎìú ÏùëÎãµ ÏÑ±Í≥µ');
        console.log('- Access Token:', accessToken ? 'received' : 'missing');
        console.log('- User Data:', backendUser);

        await AsyncStorage.setItem('userToken', accessToken);
        console.log('RN: ÌÜ†ÌÅ∞ Ï†ÄÏû• ÏôÑÎ£å');

        // üî• ÏàòÏ†ï: injectJavaScriptÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Î©îÏãúÏßÄ Ï†ÑÏÜ°
        const messageData = {
          type: 'GOOGLE_LOGIN_SUCCESS',
          user: {
            // id: userInfo.data?.user.id,
            id: backendUser.userId,
            email: userInfo.data?.user.email,
            name: userInfo.data?.user.name,
            picture: userInfo.data?.user.photo,
            provider: 'google',
          },
          accessToken: accessToken,
          redirectTo: 'https://baff-fe.vercel.app',
        };

        const jsCode = `
        console.log('RN: ÏõπÏúºÎ°ú Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï§ë:', ${JSON.stringify(
          messageData,
        )});
        document.cookie = 'accessToken=${accessToken}; path=/; max-age=604800;';
        
        // Î∞©Î≤ï 1: window.postMessage ÏÇ¨Ïö©
        window.postMessage(${JSON.stringify(messageData)}, '*');
        
        // Î∞©Î≤ï 2: Ïª§Ïä§ÌÖÄ Ïù¥Î≤§Ìä∏ ÎîîÏä§Ìå®Ïπò
        window.dispatchEvent(new CustomEvent('googleLoginSuccess', {
          detail: ${JSON.stringify(messageData)}
        }));
        
        // Î∞©Î≤ï 3: Ï†ÑÏó≠ Î≥ÄÏàò ÏÑ§Ï†ï
        window.googleLoginData = ${JSON.stringify(messageData)};
        
        true; // injectJavaScriptÎäî Î∞òÎìúÏãú trueÎ•º Î∞òÌôòÌï¥Ïïº Ìï®
      `;

        webViewRef.current?.injectJavaScript(jsCode);
        console.log('RN: ÏõπÎ∑∞Ïóê Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏôÑÎ£å');
      } catch (backendError: any) {
        console.error('RN: Î∞±ÏóîÎìú API Ìò∏Ï∂ú Ïã§Ìå®:', backendError);

        const errorMessage =
          backendError.response?.data?.message ||
          backendError.message ||
          'Î∞±ÏóîÎìú Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';

        const errorData = {
          type: 'GOOGLE_LOGIN_ERROR',
          message: errorMessage,
          details: {
            status: backendError.response?.status,
            data: backendError.response?.data,
          },
        };

        const errorJsCode = `
          console.log('RN‚ÜíÏõπ: ÏóêÎü¨ Î©îÏãúÏßÄ Ï†ÑÏÜ°', ${JSON.stringify(errorData)});
          window.postMessage(${JSON.stringify(errorData)}, '*');
          window.dispatchEvent(new CustomEvent('googleLoginError', {
            detail: ${JSON.stringify(errorData)}
          }));
          true;
        `;

        webViewRef.current?.injectJavaScript(errorJsCode);
      }
    } catch (error: any) {
      console.log('RN: Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Ïã§Ìå®', error);

      // üî• ÏàòÏ†ï: Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ ÏûêÏ≤¥ Ïã§Ìå® Ï≤òÎ¶¨
      let errorMessage = 'Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.';

      if (error.code === statusCodes.SIGN_IN_CANCELLED) {
        errorMessage = 'ÏÇ¨Ïö©ÏûêÍ∞Ä Î°úÍ∑∏Ïù∏ÏùÑ Ï∑®ÏÜåÌñàÏäµÎãàÎã§.';
      } else if (error.code === statusCodes.IN_PROGRESS) {
        errorMessage = 'Ïù¥ÎØ∏ Î°úÍ∑∏Ïù∏ ÏûëÏóÖÏù¥ ÏßÑÌñâ Ï§ëÏûÖÎãàÎã§.';
      } else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {
        errorMessage = 'Google Play ÏÑúÎπÑÏä§Í∞Ä ÏóÜÍ±∞ÎÇò Ïò§ÎûòÎêòÏóàÏäµÎãàÎã§.';
      }

      const errorData = {
        type: 'GOOGLE_LOGIN_ERROR',
        message: errorMessage,
      };

      const errorJsCode = `
        console.log('RN‚ÜíÏõπ: ÏóêÎü¨ Î©îÏãúÏßÄ Ï†ÑÏÜ°', ${JSON.stringify(errorData)});
        window.postMessage(${JSON.stringify(errorData)}, '*');
        window.dispatchEvent(new CustomEvent('googleLoginError', {
          detail: ${JSON.stringify(errorData)}
        }));
        true;
      `;

      webViewRef.current?.injectJavaScript(errorJsCode);
    }
  };

  const _signOut = async () => {
    try {
      await GoogleSignin.revokeAccess();
      await GoogleSignin.signOut();
      await AsyncStorage.removeItem('userToken');
      // Optionally, send a message to the webview to clear its state
      webViewRef.current?.postMessage(
        JSON.stringify({ type: 'LOGOUT_SUCCESS' }),
      );
    } catch (error: any) {
      console.error('Google Sign-Out Error:', error);
    }
  };

  // "ÌêÅ" Î∞õÍ∏∞
  const handleWebMessage = useCallback((event: any) => {
    try {
      const message = JSON.parse(event.nativeEvent.data);
      console.log('[App] ÏõπÏúºÎ°úÎ∂ÄÌÑ∞ Î©îÏãúÏßÄ Î∞õÏùå:', message);

      switch (message.type) {
        case 'REQUEST_GOOGLE_LOGIN':
          console.log('REQUEST_GOOGLE_LOGIN');
          _signIn();
          break;
        case 'REQUEST_GOOGLE_LOGOUT':
          console.log('REQUEST_GOOGLE_LOGOUT');
          _signOut();
          break;
        default:
          console.log('[App] <UNK> <UNK> <UNK> <UNK>');
      }
    } catch (error) {
      console.log(error);
    }
  }, []);

  return (
    // <View style={styles.container}>
    <View style={{
      flex: 1,
      paddingTop: insets.top,
      paddingBottom: insets.bottom,
    }}>
      <WebView
        ref={webViewRef}
        source={{ uri: WEB_URL }}
        style={styles.webView}
        onMessage={handleWebMessage}
        onNavigationStateChange={handleNavigationStateChange}
        javaScriptEnabled={true}
        domStorageEnabled={true}
        originWhitelist={['*']}
        // @ts-ignore
        onConsoleMessage={event => {
          console.log('[WebView Console]', event.nativeEvent.message);
        }}
        onLoadError={(syntheticEvent: any) => {
          // Îã§Ïãú any ÌÉÄÏûÖÏúºÎ°ú Î≥ÄÍ≤Ω
          const { nativeEvent } = syntheticEvent;
          console.error(
            '[WebView Load Error]',
            nativeEvent.code,
            nativeEvent.description,
          );
        }}
      />
    </View>
  );
};

const App = () => {
  return (
    <SafeAreaProvider>
      <AppContent />
    </SafeAreaProvider>
  )
}

const styles = StyleSheet.create({
  // container: {
  //   flex: 1,
  //   paddingTop: Platform.OS === 'android' ? 25 : 0,
  // },
  // buttonContainer: {
  //   padding: 10,
  //   backgroundColor: '#f0f0f0',
  //   flexDirection: 'row',
  //   justifyContent: 'space-around',
  // },
  webView: {
    flex: 1,
  },
});

export default App;
